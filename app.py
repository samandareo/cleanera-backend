from flask import Flask, request, jsonify
from flask_cors import CORS
import smtplib
from email.mime.text import MIMEText
from dotenv import load_dotenv
import requests
import threading
import os
import logging

load_dotenv()

app = Flask(__name__)
CORS(app)

logging.basicConfig(level=logging.INFO)

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'your-telegram-bot-token')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', 'your-chat-id')
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SENDER_EMAIL = os.getenv('SENDER_EMAIL', 'info.cleanera@gmail.com')
EMAIL_PASSWORD = os.getenv('EMAIL_PASSWORD', 'your-app-password')


def send_email_async(recipient_email, subject, body):
    def email_task():
        try:
            msg = MIMEText(body)
            msg['From'] = SENDER_EMAIL
            msg['To'] = recipient_email
            msg['Subject'] = subject

            with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
                server.starttls()
                server.login(SENDER_EMAIL, EMAIL_PASSWORD)
                server.sendmail(SENDER_EMAIL, recipient_email, msg.as_string())
            logging.info(f"Email sent to {recipient_email}")
        except Exception as e:
            logging.error(f"Error sending email to {recipient_email}: {e}")

    threading.Thread(target=email_task).start()


def send_telegram_message_async(chat_id, message):
    def telegram_task():
        try:
            telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            response = requests.post(telegram_url, json={"chat_id": chat_id, "text": message})
            if response.status_code != 200:
                logging.error(f"Failed to send Telegram message: {response.text}")
            else:
                logging.info("Telegram message sent successfully")
        except Exception as e:
            logging.error(f"Error sending Telegram message: {e}")

    threading.Thread(target=telegram_task).start()


@app.route('/submit-cleaning-request', methods=['POST'])
def submit_cleaning_request():
    try:
        data = request.json
        if not data:
            return jsonify({"success": False, "error": "No data received"}), 400

        name = data.get("name")
        phone = data.get("phone")
        email = data.get("email")
        rooms = data.get("rooms")
        services = data.get("services")
        date = data.get("date")
        time = data.get("time")
        address = data.get("address")

        if not all([name, phone, email, date, time, address]):
            return jsonify({"success": False, "error": "Missing required fields"}), 400

        telegram_message = f"""
–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–±–æ—Ä–∫—Éüßπ:

–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {name}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone}
Email: {email}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {rooms}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏: {services}

–î–∞—Ç–∞ —É–±–æ—Ä–∫–∏: {date}
–í—Ä–µ–º—è —É–±–æ—Ä–∫–∏: {time}

–ê–¥—Ä–µ—Å: {address}
        """

        admin_email_body = f"""
–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–±–æ—Ä–∫—É:

–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {name}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone}
Email: {email}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {rooms}
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏: {services}
–î–∞—Ç–∞ —É–±–æ—Ä–∫–∏: {date}
–í—Ä–µ–º—è —É–±–æ—Ä–∫–∏: {time}
–ê–¥—Ä–µ—Å: {address}
        """

        user_email_body = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!

–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–±–æ—Ä–∫—É –±—ã–ª –ø–æ–ª—É—á–µ–Ω. –í–æ—Ç –¥–µ—Ç–∞–ª–∏:

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {rooms}
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏: {services}
–î–∞—Ç–∞: {date}
–í—Ä–µ–º—è: {time}
–ê–¥—Ä–µ—Å: {address}

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
–°–ø–∞—Å–∏–±–æ!
        """

        send_telegram_message_async(TELEGRAM_CHAT_ID, telegram_message)
        send_email_async("cleanera.manager@gmail.com", "–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–±–æ—Ä–∫—É", admin_email_body)
        send_email_async(email, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–±–æ—Ä–∫—É", user_email_body)

        return jsonify({"success": True, "message": "Request processed successfully!"})

    except Exception as e:
        logging.error(f"Error processing request: {e}")
        return jsonify({"success": False, "error": "An error occurred while processing your request"}), 500


@app.route('/submit-parent-request', methods=['POST'])
def submit_parent_request():
    try:
        data = request.json
        if not data:
            return jsonify({"success": False, "error": "No data received"}), 400

        parent_name = data.get("parentName")
        phone = data.get("phone")
        email = data.get("email")
        child_name = data.get("childName")
        child_age = data.get("childAge")
        start_date = data.get("startDate")
        end_date = data.get("endDate")
        time = data.get("time")
        requirements = data.get("requirements")
        address = data.get("address")

        if not all([parent_name, phone, email, child_name, child_age, start_date, end_date, time, address]):
            return jsonify({"success": False, "error": "Missing required fields"}), 400

        telegram_message = f"""
–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å–ª—É–≥—É –Ω—è–Ω–∏ üë©‚Äçüëß‚Äçüë¶:

–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è: {parent_name}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone}
Email: {email}
–ò–º—è —Ä–µ–±—ë–Ω–∫–∞: {child_name}
–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞: {child_age}

–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date}
–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date}
–í—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è: {time}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: {requirements}

–ê–¥—Ä–µ—Å: {address}
        """

        admin_email_body = f"""
–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å–ª—É–≥—É –Ω—è–Ω–∏:

–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è: {parent_name}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone}
Email: {email}
–ò–º—è —Ä–µ–±—ë–Ω–∫–∞: {child_name}
–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞: {child_age}

–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date}
–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date}
–í—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è: {time}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
{requirements}

–ê–¥—Ä–µ—Å: {address}
        """

        user_email_body = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {parent_name}!

–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å–ª—É–≥—É –Ω—è–Ω–∏ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω. –í–æ—Ç –¥–µ—Ç–∞–ª–∏:

–ò–º—è —Ä–µ–±—ë–Ω–∫–∞: {child_name}
–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞: {child_age}

–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date}
–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date}
–í—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è: {time}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
{requirements}

–ê–¥—Ä–µ—Å: {address}

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å!
        """

        send_telegram_message_async(TELEGRAM_CHAT_ID, telegram_message)
        send_email_async("cleanera.manager@gmail.com", "–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å–ª—É–≥—É –Ω—è–Ω–∏", admin_email_body)
        send_email_async(email, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å–ª—É–≥—É –Ω—è–Ω–∏", user_email_body)

        return jsonify({"success": True, "message": "Request processed successfully!"})

    except Exception as e:
        logging.error(f"Error processing request: {e}")
        return jsonify({"success": False, "error": "An error occurred while processing your request"}), 500

@app.route('/submit-nanny-request', methods=['POST'])
def submit_nanny_request():
    try:
        data = request.json
        if not data:
            return jsonify({"success": False, "error": "No data received"}), 400

        gender = data.get("gender")
        name = data.get("name")
        dob = data.get("dob")
        phone = data.get("phone")
        email = data.get("email")
        address = data.get("address")

        if not all([gender, name, phone, email, address]):
            return jsonify({"success": False, "error": "Missing required fields"}), 400

        telegram_message = f"""
    –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –Ω—è–Ω–∏üë©üèº‚Äçüçº:
    
–ü–æ–ª: {gender}
–ò–º—è –∏ –§–∞–º–∏–ª–∏—è: {name}
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dob}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}
Email: {email}

–ê–¥—Ä–µ—Å: {address}
        """

        admin_email_body = f"""
    –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –Ω—è–Ω–∏:

    –ü–æ–ª: {gender}
    –ò–º—è –∏ –§–∞–º–∏–ª–∏—è: {name}
    –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dob}
    –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}
    Email: {email}
    –ê–¥—Ä–µ—Å: {address}
        """

        user_email_body = f"""
    –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!

    –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –Ω—è–Ω–∏ –±—ã–ª –ø–æ–ª—É—á–µ–Ω. –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:

    –ü–æ–ª: {gender}
    –ò–º—è –∏ –§–∞–º–∏–ª–∏—è: {name}
    –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dob}
    –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}
    –ê–¥—Ä–µ—Å: {address}

    –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤.
    –°–ø–∞—Å–∏–±–æ!
        """

        send_telegram_message_async(TELEGRAM_CHAT_ID, telegram_message)
        send_email_async("cleanera.manager@gmail.com", "–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –Ω—è–Ω–∏", admin_email_body)
        send_email_async(email, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –Ω—è–Ω–∏", user_email_body)

        return jsonify({"success": True, "message": "Request processed successfully!"})

    except Exception as e:
        logging.error(f"Error processing nanny request: {e}")
        return jsonify({"success": False, "error": "An error occurred while processing your request"}), 500


@app.route('/submit-cleaner-request', methods=['POST'])
def submit_cleaner_request():
    try:
        data = request.json
        if not data:
            return jsonify({"success": False, "error": "No data received"}), 400

        gender = data.get("gender")
        name = data.get("name")
        dob = data.get("dob")
        phone = data.get("phone")
        email = data.get("email")
        address = data.get("address")

        if not all([gender, name, phone, email, address]):
            return jsonify({"success": False, "error": "Missing required fields"}), 400


        telegram_message = f"""
        –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ —É–±–æ—Ä–∫–µüë§üßπ:
        
–ü–æ–ª: {gender}
–ò–º—è –∏ –§–∞–º–∏–ª–∏—è: {name}
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dob}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}
Email: {email}

–ê–¥—Ä–µ—Å: {address}
        """


        admin_email_body = f"""
        –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —É–±–æ—Ä—â–∏–∫–∞:

        –ü–æ–ª: {gender}
        –ò–º—è –∏ –§–∞–º–∏–ª–∏—è: {name}
        –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dob}
        –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}
        Email: {email}
        –ê–¥—Ä–µ—Å: {address}
        """

        user_email_body = f"""
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!

        –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —É–±–æ—Ä—â–∏–∫–∞ –±—ã–ª –ø–æ–ª—É—á–µ–Ω. –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:

        –ü–æ–ª: {gender}
        –ò–º—è –∏ –§–∞–º–∏–ª–∏—è: {name}
        –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dob}
        –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}
        –ê–¥—Ä–µ—Å: {address}

        –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤.
        –°–ø–∞—Å–∏–±–æ!
        """

        send_telegram_message_async(TELEGRAM_CHAT_ID, telegram_message)
        send_email_async("cleanera.manager@gmail.com", "–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —É–±–æ—Ä—â–∏–∫–∞", admin_email_body)
        send_email_async(email, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —É–±–æ—Ä—â–∏–∫–∞", user_email_body)

        return jsonify({"success": True, "message": "Request processed successfully!"})

    except Exception as e:
        logging.error(f"Error processing cleaner request: {e}")
        return jsonify({"success": False, "error": "An error occurred while processing your request"}), 500

if __name__ == '__main__':
    app.run(debug=True)
